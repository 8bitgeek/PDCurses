			Welcome to PDCurses !

 This file provides information on building PDCurses for DOS, OS/2,
 Windows or X11. After unpacking the archive, go to the section below
 for the platform you intend to build on.

 DOS, OS/2, or Windows
 ---------------------
 . Set the environment variable PDCURSES_SRCDIR to point to the
   directory where you unpacked PDCurses. (Skip this step if you're
   using LCC-Win32.) For example:

	set PDCURSES_SRCDIR=c:\pdcurses

 . In the subdirectory for each OS, you'll find a number of ".mak"
   files, one for each supported compiler:

   DOS:
	bccdos.mak	- Borland C++ 3.0+
	gccdos.mak	- DJGPP V2
	mscdos.mak	- Microsoft C
	wccdos16.mak	- Watcom 10.6+ (16-bit)
	wccdos4g.mak	- Watcom 10.6+ (32-bit)

   OS/2:
	bccos2.mak	- Borland C++ 2.0
	gccos2.mak	- EMX 0.9b+
	iccos2.mak	- C Set/2
	wccos2.mak	- Watcom 10.6+ (32-bit)

   Windows:
	bccwin32.mak	- Borland C++ 4.0.2+
	gccwin32.mak	- Cygnus GNU Compiler
	lccwin32.mak	- LCC-Win32
	mingwin32.mak	- MinGW
	vcwin32.mak	- Microsoft Visual C++ 2.0+
	wccwin32.mak	- Watcom 10.6+

 . In some cases, you may have to edit the makefile before proceeding.
   LCC-Win32 users must point PDCURSES_HOME to the PDCurses directory.
   For 16-bit compilers, some might want to change the memory MODEL.
   (Large model is the default, and recommended.) Read the makefile for
   other options; but generally, you can proceed to...

 . Build it:

	make -f makefilename

   You can build it from the OS subdirectory, or from another location
   by specifying the full path to the makefile. (For Watcom, use "wmake"
   instead of "make"; for MSVC or C Set/2, "nmake".) You'll get the libs
   (pdcurses.lib or .a, depending on your compiler; and panel.lib or .a),
   the demos (*.exe), and a lot of object files.


 X11
 ---
 . Run the configure script in the PDCurses-x.x directory. This will
   check for the dependencies libXCurses requires.

   If configure can't find your X include files or X libraries, you can
   specify the paths with the arguments "--x-includes=inc_path" or
   "--x-libraries=lib_path".

   configure also recognises the "--with-debug[=yes|no]" switch. By
   default, the library and demo programs are built with the optimiser
   switch; -O. You can turn this off, and turn on debugging (-g), by
   adding "--with-debug" to the configure command.

 . Run "make". This should make libXCurses, the panels library and all
   demo programs in the demos directory.

 . Alternately, you can cd to "pdcurses" directory, and run "make" from
   here. This will build libXCurses only.

 . Optionally, run "make install". curses.h, panel.h and the panel lib
   will be renamed when installed (xcurses.h, xpanel.h and libXpanel),
   to avoid conflicts with any existing curses installations.
