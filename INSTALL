                    Welcome to PDCurses !

 This file provides information on installing PDCurses on DOS, OS/2,
 Windows or for X11, and building the PDCurses library.

 The first step is to unpack the archive. (You've already done that!)

 Next, go to the section below for the platform you intend to build
 the software on, and follow the steps there.

 OS2
 ---
 . Set the environment variable PDCURSES_SRCDIR to point to the 
   directory where you unpacked PDCurses. For example:

         set PDCURSES_SRCDIR=c:\emx\PDCurses-2.7

 . cd to the "os2" directory under that directory. You'll find a number 
   of ".mak" files here, one for each supported compiler:

         bccos2.mak - Borland C++ 2.0
         gccos2.mak - EMX 0.9b+
         iccos2.mak - C Set/2
         owos2.mak  - OpenWatcom
         wccos2.mak - Watcom 10.6+

 . Watcom users may have to edit the makefile to set CCINCDIR to the 
   directory containing os2.h.

 . Build it:

         make -f makefilename

   (For Watcom, use "wmake" instead of "make"; for C Set/2, "nmake".)

 . That's it!


 DOS
 ---
 . Set the environment variable PDCURSES_SRCDIR to point to the 
   directory where you unpacked PDCurses. For example:

         set PDCURSES_SRCDIR=c:\pdcurs27

 . cd to the "dos" directory under that directory. You'll find a number 
   of ".mak" files here, one for each supported compiler:

         bccdos.mak   - Borland C++ 3.0+
         gccdos.mak   - DJGPP V2
         mscdos.mak   - Microsoft C 6.0
         msvcdos.mak  - Visual C++ 1.0+
         wccdos16.mak - Watcom 10.6+ (16bit)
         wccdos4g.mak - Watcom 10.6+ (32bit)

 . For 16-bit compilers, you may also want to edit the makefile to
   change the memory MODEL. (Large model is the default, and 
   recommended.)

 . Build it:

         make -f makefilename

   (For Watcom, use "wmake" instead of "make"; for MSVC, "nmake".)

 . That's it!


 Windows
 -------
 . Set the environment variable PDCURSES_SRCDIR to point to the 
   directory where you unpacked PDCurses. (Skip this step if you're 
   using LCC-Win32.) For example:

         set PDCURSES_SRCDIR=c:\PDCurses-2.7

 . cd to the "win32" directory under that directory. You'll find a 
   number of ".mak" files here, one for each supported compiler:

         bccwin32.mak   - Borland C++ 4.0.2+
         gccwin32.mak   - Cygnus GNU Compiler
         lccwin32.mak   - LCC-Win32
         mingwin32.mak  - MinGW
         vcwin32.mak    - Visual C++ 2.0+
         wccwin32.mak   - Watcom 10.6+

 . LCC users will have to edit lccwin32.mak to point PDCURSES_HOME to 
   the PDCurses directory.

 . Build it:

         make -f makefilename

   (For Watcom, use "wmake" instead of "make"; for MSVC, "nmake".)

 . That's it!


 X11
 ---
 . Run the configure script in the PDCurses-x.x directory. This will 
   check for the dependencies XCurses requires.

   If configure can't find your X include files or X libraries, you can
   specify the paths with the arguments "--x-includes=inc_path" or 
   "--x-libraries=lib_path".

   configure also recognises the "--with-debug[=yes|no]" switch. By 
   default, the library and demo programs are built with the optimiser 
   switch; -O. You can turn this off, and turn on debugging (-g), by 
   adding "--with-debug" to the configure command.

 . Run "make". This should make the XCurses library, the panels library 
   and all demo programs in the demos directory.

 . Alternately, you can cd to "pdcurses" directory, and run "make" from
   here.  This will build libXCurses only.

 . That's it!
